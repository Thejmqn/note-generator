import os
from enum import Enum
import re

NOTE_NUM = 3
IMAGE_TYPES = ["jpg", "png", "gif", "webp", "svg"]

def get_images(directory):
    files = os.listdir(directory)
    images = []
    for file in files:
        for image_type in IMAGE_TYPES:
            if file.endswith("." + image_type):
                images.append(os.path.join(directory, file))
    for i, image in enumerate(images):
        images[i] = re.findall(r'(?<=[\\/])[^\\/]+$', image)[0]
    return images

def open_file():
    f = open("Note" + str(NOTE_NUM) + ".jsx", "w", encoding="utf-8")
    return f

def get_link(text):
    link = ""
    add_text = False
    for char in text:
        if char == ")":
            return link
        if add_text:
            link += char
        if char == "(":
            add_text = True
    return link

# TODO: Update for regexes
def style_phrase(line):
    open_tag = False
    write_text = True
    format_line = ""
    for i, char in enumerate(line):
        match char:
            case "*":
                if open_tag:
                    format_line += "</i>"
                    open_tag = False
                else:
                    format_line += "<i>"
                    open_tag = True
            case "`":
                if open_tag:
                    format_line += "</code>"
                    open_tag = False
                else:
                    format_line += "<code>"
                    open_tag = True
            case "\"" | "“" | "”":
                if open_tag:
                    format_line += "</q>"
                    open_tag = False
                else:
                    format_line += "<q>"
                    open_tag = True
            case "[":
                open_tag = True
                link = get_link(line[i:])
                format_line += "<a href=\"" + link + "\" target=\"_blank\" rel=\"noopener noreferrer\">"
            case "]":
                format_line += "</a>"
            case "(" if open_tag:
                write_text = False
            case ")" if open_tag:
                write_text = True
                open_tag = False
            case "|":
                write_text = not write_text
            case _:
                if write_text:
                    format_line += char
    return format_line

def main():
    images = get_images(r'C:\Users\jav3fh\Programming\personal-site\src\notes\\' + str(NOTE_NUM))
    print(images)
    f = open_file()
    f.write("""//Auto-generated by note-generator program
import notes_list from "../notes_list";
import { Link } from "react-router-dom";
import './../notes_page.css';\n""")
    for image in images:
        no_ext = re.findall(r'[^\.]+(?=\.)', image)[0]
        f.write("import " + no_ext + " from './" + image + "';\n")
    f.write("export default function Note{num}() {{\n".format(num=NOTE_NUM))
    f.write("    const noteIndex = {num};".format(num=NOTE_NUM))
    f.write("""
    const note = notes_list[noteIndex];
    if (!note) return <div className="note-container">Note not found.</div>;
    const prevNote = notes_list[noteIndex - 1];
    const nextNote = notes_list[noteIndex + 1];
    
    return (
    <div className="note-container">
        <Link to="/notes" className="back-link">← Back to Notes</Link>
        <img src={note.image} alt={note.title} className="note-header-image" />
        <h1>{note.title}</h1>
        <div className="note-date">Published on {note.date}</div>\n""")

    r = open("test.md", "r", encoding="utf-8")
    raw = r.read().split("\n")
    raw.pop(0) # remove header
    for line in raw:
        if len(line) < 1:
            continue
        match line[0]:
            case "#":
                f.write("        <h2>" + line[2:] + "</h2>\n")
            case "{":
                caption = re.findall(r'(?<=\{)[^{}]*(?=\})', line)[0]
                image = re.findall(r'(?<=\()[^.)]+', line)[0]
                source = re.findall(r'(?<=Source: )[^\)]+(?=\))', line)[0]
                f.write("""        <figure className="note-figure">
            <img src={""" + image + "} alt=\"" + caption + "\" className=\"note-inline-image\" />\n")
                f.write("            <figcaption>" + caption + "</figcaption>\n")
                f.write("""            <span className="image-source">Source: <a href='""" + source + """' target="_blank" rel="noopener noreferrer">Wikipedia</a></span>\n""")
                f.write("        </figure>\n")
            case _:
                if line[0] == "\t":
                    line = line[1:]
                line = style_phrase(line)
                f.write("        <p>" + line.strip() + "</p>\n")

    f.write("""
        <div className="note-nav">
            {prevNote && <Link to={`${window.location.pathname}/../${nextNote.link}`} className="note-nav-link">← {nextNote.title}</Link>}
            {nextNote && <Link to={`${window.location.pathname}/../${prevNote.link}`} className="note-nav-link">{prevNote.title} →</Link>}
        </div>
    </div>
    );
}\n""")
    f.close()
    r.close()

if __name__ == "__main__":
    main()
